@page "/certificates-group/{YachtId}"
@using Microsoft.Maui.Storage
@using System.Text.Json
@using MauiApp1.Models
@inject NavigationManager NavManager

<div style="position:absolute;top:0;left:0;width:100%;height: calc(100vh - 60px);z-index: 1051;background: #fff;">
    <header class="header header-fixed">
        <div class="header-content">
            <div class="left-content">
                <BackButton />
            </div>
            <div class="mid-content"><h6 class="title">@YachtId</h6></div>
            <div class="right-content">
                <NavLink href="/countrylist" class="pf-icon fs-5 icon-sm text-light py-3 ps-3">
                    <i class="fas fa-home fs-5"></i>
                </NavLink>
            </div>
        </div>
    </header>

    <main class="page-content">
        <div class="search-container header-sticky" style="top: 60px;">
            <span class="search-icn fa fa-search"></span>
            <input type="text" placeholder="Search certificates..." class="form-control form-control-lg rounded-0" @bind="searchText" />
        </div>

        <div class="notification-list content-section">
            <ul class="list-group certificate-list">
                @if (FilteredCertificates.Count == 0)
                {
                    <li class="certificate-card bg-white border-0 text-muted p-3">No certificates found.</li>
                }
                else
                {
                    @foreach (var cert in FilteredCertificates)
                    {
                        <li class="certificate-card border-bottom bg-white">
                            <div class="media">
                                <div class="media-50 rounded-3 border d-flex justify-content-center align-items-center">
                                    <i class="fas fa-certificate fs-5 text-info"></i>
                                </div>
                                <div class="list-content w-100">
                                    <div class="d-flex w-100">
                                        <strong>@cert.Title</strong>
                                        <small class="ms-auto">@cert.DateIssued.ToString("dd/MM/yyyy")</small>
                                    </div>
                                    <div class="d-flex w-100 align-items-center">
                                        <div>
                                            <p class="m-0">@cert.Description</p>
                                            <span class="text-muted">@cert.Number</span>
                                        </div>
                                        <button class="btn btn-sm btn-warning ms-auto" @onclick="() => OpenCertificate(cert)">View</button>
                                    </div>
                                </div>
                            </div>
                        </li>
                    }
                }
            </ul>
        </div>

        <CertificateDialog Certificate="selectedCertificate" Visible="isDialogOpen" OnClose="CloseDialog" />
    </main>
</div>

@code {
    [Parameter] public string YachtId { get; set; }

    private string searchText;
    private List<CertificateModel> Certificates = new();
    private CertificateModel selectedCertificate;
    private bool isDialogOpen;

    private List<CertificateModel> FilteredCertificates =>
        string.IsNullOrEmpty(searchText)
            ? Certificates
            : Certificates.Where(c => c.Title.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override void OnInitialized()
    {
        LoadCertificates();
    }

    private void LoadCertificates()
    {
        try
        {
            string key = $"certificates_{YachtId}";
            var json = Preferences.Get(key, null);

            if (!string.IsNullOrEmpty(json))
            {
                var legacyList = JsonSerializer.Deserialize<List<LegacyCertificate>>(json) ?? new();
                Certificates = legacyList.Select(c =>
                    new CertificateModel(
                        $"Certificate - {c.Date:dd/MM/yyyy}",
                        c.Description,
                        c.CertificateId,
                        c.Date
                    )).ToList();
            }
        }
        catch
        {
            Certificates = new List<CertificateModel>();
        }
    }

    private void OpenCertificate(CertificateModel cert)
    {
        selectedCertificate = cert;
        isDialogOpen = true;
    }

    private void CloseDialog()
    {
        isDialogOpen = false;
    }

    private class LegacyCertificate
    {
        public string CertificateId { get; set; }
        public string Description { get; set; }
        public DateTime Date { get; set; }
        public double TotalFuelConsumedL { get; set; }
        public double TotalCO2EmissionsKg { get; set; }
    }
}
