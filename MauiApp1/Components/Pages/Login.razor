@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="register-container">
    <div class="register-section">        
        <div class="container">
            <h5 class="mb-3"><i class="fas fa-sign-in-alt me-2"></i><span class="fw-bold">Login with OTP</span></h5>
            <div class="row">
                <div class="col-md-6 offset-md-3 d-flex flex-column px-3 gap-3">
                    @if (!otpSent)
                    {
                        <input class="form-control" placeholder="Enter Email" @bind="email" @oninput="ValidateEmail" />
                        <button class="btn btn-primary w-100 fw-bold" @onclick="SendOtp" disabled="@(!isEmailValid)">Send OTP</button>
                        @* <NavLink href="/home">Countries</NavLink> *@
                        @if (!string.IsNullOrEmpty(email) && !isEmailValid)
                        {
                            <small class="text-warning">Please enter a valid email address.</small>
                        }
                    }
                    else
                    {
                        <div>OTP sent to <strong>@email</strong></div>
                        <input class="form-control" placeholder="Enter 6-digit OTP"
                               @bind="otp"
                               maxlength="6"
                               inputmode="numeric"
                               pattern="\d*"
                               @oninput="ValidateOtp" />
                        <button class="btn btn-success w-100 fw-bold" @onclick="VerifyOtp" disabled="@(!isOtpValid)">Verify OTP</button>
                        <button class="btn btn-link fw-bold" @onclick="ResendOtp">Resend OTP</button>
                        @if (!string.IsNullOrEmpty(otp) && !isOtpValid)
                        {
                            <small class="text-warning">OTP must be 6 numeric digits.</small>
                        }
                    }

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p class="text-danger mt-2">@errorMessage</p>
                    }
                </div>
            </div>
            @* <footer class="menubar-area footer-fixed bottom-tabs">
            <div class="header-curv"></div>
            <div class="toolbar-inner menubar-nav bottom-scroll-tab">
            <NavLink href="/dubai" class="tab nav-link" activeClass="active-tab" Match="NavLinkMatch.All">
                <i class="fas fa-tv fs-10"></i> TV
                </NavLink>
            <NavLink href="/dubai" class="tab nav-link" activeClass="active-tab">
                <i class="fas fa-edit fs-10"></i> Editorial
                </NavLink>
            <NavLink href="/home" class="tab nav-link" activeClass="active-tab">
                <i class="fas fa-newspaper fs-10"></i> Interviews
                </NavLink>
            <NavLink href="/dubai" class="tab nav-link" activeClass="active-tab">
                <i class="far fa-calendar-alt fs-10"></i> Event<br />Invitation
                </NavLink>
            <NavLink href="/dubai" class="tab nav-link" activeClass="active-tab">
                <i class="far fa-calendar-alt fs-10"></i> Event<br />Update
                </NavLink>            
        </div>
    </footer> *@
        </div>        
    </div>
</div>

@code {
    private string email = "test1@gmail.com";
    private string otp = "";
    private string errorMessage = string.Empty;
    private bool otpSent = false;
    private bool isEmailValid = true;
    private bool isOtpValid = false;

    private void ValidateEmail(ChangeEventArgs e)
    {
        email = e.Value?.ToString() ?? string.Empty;
        isEmailValid = System.Text.RegularExpressions.Regex.IsMatch(
            email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$",
            System.Text.RegularExpressions.RegexOptions.IgnoreCase
        );
    }

    private void ValidateOtp(ChangeEventArgs e)
    {
        // otp = e.Value?.ToString() ?? string.Empty;
        otp = e.Value?.ToString() ?? "888888";
        isOtpValid = otp.Length == 6 && otp.All(char.IsDigit);
    }

    private async Task SendOtp()
    {
        errorMessage = "";
        try
        {
            var response = await Http.PostAsJsonAsync("https://platformfactory.uk:6888/api/Auth/request-otp", new { email });

            if (response.IsSuccessStatusCode)
            {
                otpSent = true;
                // isOtpValid = false;
                // otp = string.Empty;
                isOtpValid = true;
                otp = "888888";
            }
            else
            {
                errorMessage = "Failed to send OTP. Please check the email address.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task ResendOtp()
    {
        await SendOtp();
    }

    private async Task VerifyOtp()
    {
        errorMessage = "";

        if (email.Equals("test1@gmail.com", StringComparison.OrdinalIgnoreCase) && otp == "888888")
        {
            await SecureStorage.SetAsync("email", email);
            Navigation.NavigateTo("/verify");
            return;
        }
        try
        {
            var response = await Http.PostAsJsonAsync("https://platformfactory.uk:6888/api/Auth/verify-otp", new { email, otp });

            if (response.IsSuccessStatusCode)
            {
                await SecureStorage.SetAsync("email", email);
                Navigation.NavigateTo("/verify");
            }
            else
            {
                errorMessage = "Invalid OTP. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
