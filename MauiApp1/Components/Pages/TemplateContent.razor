@page "/templatecontent/{id:int}/{fkicountryid:int}/{countryname}/{title}"
@using MauiApp1.Services
@using MauiApp1.Components.Models
@inject TemplateService TemplateDataService

@* <div class="page-title d-flex px-3 py-3 align-items-center">
    <h2>@countryname<span class="fs-2">/@title</span></h2>
    <NavLink class="btn btn-sm text-muted ms-auto" href="/countrylist"><i class="fas fa-home"></i> Home</NavLink>
</div> *@

@if (TemplateDataContent == null)
{
    <div class="loader-container">
        <div class="im-loader">
            <span class="im-text">IM</span>
            <div class="im-spinner"></div>
        </div>
    </div>
}
else if (TemplateDataContent.Count == 0)
{
    <p>No content found.</p>
}
else
{
    <header class="header header-fixed">
        <div class="header-content">
            <div class="left-content">
                <NavLink href="@($"/eventsdata/{fkicountryid}/{countryname}/{title}")" class="back-btn pf-icon d-flex align-items-center py-3 pe-3">
                    <i class="fas fa-chevron-left fs-5"></i>
                </NavLink>
                <div>
                    <h2 class="fw-bold m-0">@countryname</h2>
                    <p class="m-0 small fw-bold text-primary">Events / @title</p>
                </div>
            </div>
        </div>
    </header>
    @* <div class="page-title d-flex px-3 pt-4 pb-0 align-items-center justify-content-center">
        <NavLink href="@($"/eventsdata/{fkicountryid}/{countryname}/{title}")" class="back-btn pf-icon d-flex align-items-center py-3 pe-3">
            <i class="fas fa-chevron-left fs-5"></i>
        </NavLink>
        <div>
            <h2 class="fw-bold m-0">@countryname</h2>
            <p class="m-0 small fw-bold text-primary">Events / @title</p>
        </div>
    </div> *@
    @*  <div class="mid-content"> <h6 class="title">@title</h6> </div>
            <div class="right-content">
                <NavLink href="/countrylist" class="pf-icon fs-5 icon-sm py-3 ps-3"><i class="fas fa-home fs-5"></i></NavLink>
            </div> *@
    @foreach (var item in TemplateDataContent)
    {
        <div class="row">
            <a href="@($"/newsexpand/{item.id}/{item.fKiEventID}/{item.fKiCountryID}/{countryname}/{title}")" class="col-sm-4">
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="img-container mb-3"><img src="@item.imagePath" /></div>
                        <div class="bg-white">
                            @((MarkupString)item.sContent)
                        </div>
                    </div>
                </div>
            </a>
        </div>
    }
}



@code {
    [Parameter] public int id { get; set; }
    [Parameter] public int fkicountryid { get; set; }
    [Parameter] public string countryname { get; set; } = string.Empty;
    [Parameter] public string title { get; set; } = string.Empty;


    private List<TemplateDataContent> TemplateDataContent;
    readonly Dictionary<string, string> ActiveTabs = new();


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            TemplateDataContent = null; // show loading
            TemplateDataContent = await TemplateDataService.GetContentData(id, fkicountryid);


        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading template content: " + ex.Message);
            TemplateDataContent = new List<TemplateDataContent>();
        }
    }
    //     readonly Dictionary<string, string> tabDisplayNames = new()
    // {
    //     { "events", "Events" },
    //     { "investor", "Investor" },
    //     { "yachting", "Yachting" },
    //     { "luxury", "Luxury" },
    //     { "tourist", "Tourist" },
    //     { "luxury_yachting", "Luxury Yachting" }
    // };

    // string GetSubtitle()
    // {
    //     if (string.IsNullOrWhiteSpace(activeTab))
    //         return string.Empty;

    //     return tabDisplayNames.TryGetValue(activeTab.ToLower(), out var displayName)
    //         ? $" / {displayName}"
    //         : $" / {char.ToUpper(activeTab[0]) + activeTab.Substring(1)}";
    // }

    private string? openPanel = null;
    private bool isClosingPanel = false;
    async void ClosePanel()
    {
        isClosingPanel = true;
        StateHasChanged(); // Trigger UI update to apply "slide-out"

        await Task.Delay(300); // Match CSS animation time
        openPanel = null;
        isClosingPanel = false;
        StateHasChanged(); // Refresh after closing
    }


}
