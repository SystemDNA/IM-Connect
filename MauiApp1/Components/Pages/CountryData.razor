@page "/countrydata/{id:int}/{countryname}"
@using MauiApp1.Services
@using MauiApp1.Components.Models
@inject CountriesDataService ListofCountriesDataService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using Microsoft.AspNetCore.Components
@inject NewsService NewsService

<div class="page-title d-flex px-3 pt-4 pb-0 align-items-center justify-content-center">
    <NavLink href="@($"/countrylist")" class="back-btn pf-icon d-flex align-items-center py-3 pe-3">
        <i class="fas fa-chevron-left fs-5"></i>
    </NavLink>
    <h1>@countryname<span class="fs-2">@GetSubtitle()</span></h1>
</div>

<div class="content-section container" style="@GetListVisibility()">    
    @if (CountriesData == null)
    {
        @* <p>Loading...</p> *@
        <div class="loader-container">
            <div class="im-loader">
                <span class="im-text">IM</span>
                <div class="im-spinner"></div>
            </div>
        </div>
    }
    else if (CountriesData.Count == 0)
    {
        <div class="container">
            <div class="alert alert-danger">No countries data found.</div>
        </div>
    }
    else
    {
        <ul class="row g-3">
        @foreach (var p in CountriesData)
        {
                <li class="col-6 country-@p.sName">
               
                    <NavLink href="@($"/eventsdata/{p.id}/{countryname}/{p.sName}")" class="d-flex align-items-center justify-content-center py-2 bg-white shadow-lg-light rounded-3">
                        <i class="fas fa-@p.sName fs-10 me-2 text-muted"></i>
                    <span class="fw-bold fs-3 text-color">@p.sName</span>
                </NavLink>
            </li>
        }
        </ul>
    }    
    @* <NavLink href="/login">Back</NavLink> *@
    
</div>
@if (newsItems == null)
{
    @* <p>Loading latest news...</p> *@
    <div class="loader-container">
        <div class="im-loader">
            <span class="im-text">IM</span>
            <div class="im-spinner"></div>
        </div>
    </div>
}
else if (newsItems.Count > 0)
{
   <div class="content-section container">
    <h2 class="fw-bold text-primary">News today</h2>
    <div class="slider">
        <div class="swiper col-1-swiper">
            <div class="swiper-wrapper">
                <div class="swiper-slide shadow-lg-light">
                    @foreach (var news in newsItems)
                    {
                    <div class="img-container">
                                <div class="mask"></div>
                      <img src="@news.imagePath" />
                    </div>
                    <div class="image-caption">
                                <h4 class="title-post">@news.sContent</h4>
                                <span class="category-tag">@news.sName <i class="fas fa-circle"></i></span>
                                <span class="date">@news.xicreatedWhen</span>
                    </div>
                    }
                 </div>
            </div>
        </div>
    </div>
  </div>
}

@code {
    [Parameter]
    public int id { get; set; }
    [Parameter] public string countryname { get; set; } = string.Empty;
    
    [Parameter] public string titlename { get; set; } = string.Empty;

    

    private List<News> newsItems;

    private List<CountriesData> CountriesData;
    private string activeTab = "";
    private List<string> tabsdata = new();
    private readonly HashSet<string> tabsToHideList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CountriesData = await ListofCountriesDataService.GetCountriesDataAsync(id);
            
            newsItems = await NewsService.GetNewsAsync(0,id);
            if (CountriesData != null && CountriesData.Count > 0)
            {
                // foreach (var item in CountriesData)
                // {
                //     tabsdata.Add(item.Name);
                //     tabsToHideList.Add(item.Name);
                // }
                var tabNames = CountriesData.Select(x => x.sName?.ToLower()).ToList();
                // Open "events" tab by default if it exists
                
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error fetching Countries: " + ex.Message);
            CountriesData = new List<CountriesData>();
        }
    }
    private async Task ShowTabAsync(string? tab)
    {
        activeTab = tab ?? "";
        await Task.Delay(50);
        await JS.InvokeVoidAsync("initSwiper");
        StateHasChanged();
    }
    private string GetListVisibility()
    {
        return string.IsNullOrEmpty(activeTab) || !tabsToHideList.Contains(activeTab)
            ? ""
            : "display: none;";
    }

    private async void ShowTab(string tab)
    {
        activeTab = tab ?? "";
        await Task.Delay(50);
        await JS.InvokeVoidAsync("initSwiper");
    }

    private string GetTabClass(string tab)
    {
        return activeTab == tab ? "active-tab" : "";
    }

    private string GetSubtitle()
    {
        return activeTab switch
        {
            "events" => " / Events",
            "investor" => " / Investor",
            "yachting" => " / Yachting",
            "luxury" => " / Luxury",
            "tourist" => " / Tourist",
            _ => ""
        };
    }

    // Optional: Call swiper on first render
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initSwiper");
        }
    }
}
