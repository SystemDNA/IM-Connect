@page "/latestnews/{id:int}/{fkicountryid:int}/{countryname}/{title}"
@using MauiApp1.Services
@using MauiApp1.Components.Models
@inject NewsService NewsService
@inject NavigationManager Navigation
@* //space top bottom *@
@using MauiApp1.Components.Layout
@layout MainLayout
@inherits LayoutComponentBase
@* <header class="header header-fixed">
    <div class="header-content">
        <div class="left-content">
            <NavLink href="@($"/eventsdata/{fkicountryid}/{countryname}/{title}")" class="back-btn pf-icon d-flex align-items-center py-3 pe-3">
                <i class="fas fa-chevron-left fs-5"></i>
            </NavLink>
        </div>
        <div class="mid-content"></div>
        <div class="right-content"></div>
    </div>
    <div class="header-curv"></div>
</header> *@
@if (LatestNewsData == null)
{
    <p>Loading latest news...</p>
}
else if (LatestNewsData.Count > 0)
{
    <div class="content-section container FullContentView">
        <NavLink href="@($"/eventsdata/{fkicountryid}/{countryname}/{title}")" class="btn-close FullContentViewClose"></NavLink>
        
            @foreach (var newsContent in LatestNewsData)
            {
            <div class="card">
                <div class="card-body">
                    <h4 class="title">@newsContent.sTitle</h4>
                @((MarkupString)newsContent.sContent)
                </div>
</div>
            }
        
    </div>

}



@code {
    [Parameter] public int id { get; set; }
    [Parameter] public int fkicountryid { get; set; }
    [Parameter] public string countryname { get; set; } = string.Empty;
    [Parameter] public string title { get; set; } = string.Empty;
    [CascadingParameter] private MainLayout? MainLayout { get; set; }//space top bottom function

    private List<NewsContent> LatestNewsData;

    private bool spacingSet = false;//space top bottom function
    protected override async Task OnInitializedAsync()
    {
        try
        {
            LatestNewsData = await NewsService.GetNewsContentAsync(id);

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading events: " + ex.Message);
            LatestNewsData = new List<NewsContent>();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            MainLayout.SetPageSpacing(top: false, bottom: false);//space top bottom function
            spacingSet = true;//space top bottom function
        }
    }
}
