@inject IJSRuntime JS
@implements IAsyncDisposable

@using MauiApp1.Services
@using MauiApp1.Components.Layout
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject UserLocationService LocationService

<div class="page-wrapper full-height">
    @if (!hideHeader)
            {
        <header class="header header-fixed">
            <div class="header-content">
                <div class="left-content">
                    <img src="images/logo-white.svg" alt="logo" class="header-logo" /><span class="text-light fw-bold"> IM Investor</span>
                </div>
            @if (!hideHeaderAndWhatsApp)
            {
                <div class="mid-content"></div>
                <div class="right-content position-relative d-flex align-items-center">
                    <span class="btn text-light btn-dark btn-sm">@_country</span>
                    @* <a class="btn text-light btn-dark btn-sm ms-1" @onclick="() => showDialog = true"><i class="fas fa-calculator fs-4"></i></a> *@
                        <a class="btn text-light btn-dark btn-sm ms-1" @onclick="ShowTools"><i class="fas fa-calculator fs-4"></i></a>
                        @* <button class="btn btn-success" @onclick="ShowTools">Open Yacht Tools</button> *@
                    <!-- Dropdown container -->
                    <div class="moreOption-wrapper ms-1" id="dropdownArea">
                        <a class="btn btn-dark btn-sm px-3" @onclick="ToggleDropdown">
                            <i class="fas fa-ellipsis-v fs-4"></i>
                        </a>

                        @if (showDropdown)
                        {
                            <ul class="moreOption-dropdown" id="dropdownMenu">
                                <li @onclick="NavigateToDetails">
                                    <i class="fas fa-info-circle me-2"></i> Details
                                </li>
                                <li @onclick="NavigateToCertificates">
                                    <i class="fas fa-certificate me-2"></i> CO₂ Certificates
                                </li>
                                <li @onclick="Logout">
                                    <i class="fas fa-sign-out-alt me-2"></i> Logout
                                </li>
                            </ul>
                        }
                    </div>
                </div>
            }
            </div>
        </header>
    }
    <main class="page-content space-top space-bottom">
        <article class="position-relative page-transition @transitionClass">
            @if (!hideHeaderAndWhatsApp)
            {
                <div class="input-group input-group-sm whatsapp-btn">
                    <a href="https://api.whatsapp.com/send/?phone=%2B447979213225&amp;text=please+invite+me+to+the+Dubai+event&amp;type=phone_number&amp;app_absent=0" target="_blank" class="btn btn-success d-flex align-items-center"><i class="fab fa-whatsapp fs-5 me-2"></i>Please invite me to the Dubai event</a>
                </div>
            }
            @Body
        </article>
        @if (!hideHeaderAndWhatsApp)
        {
            @* <YachtEmissionDialog IsOpen="@showDialog" OnClose="@(() => showDialog = false)" />
            <YachtToolsTabs OnClose="@(() => showTools = false)" style="@(!showTools ? "display:none;" : "")" /> *@
        }
        @* @if (showToolsDialog)
        {
            <YachtToolsTabs OnClose="HideTools" />
            <YachtToolsTabs class="my-modal" style="z-index: 1050;" OnClose="HideTools" />
        } *@
        @if (showToolsDialog)
        {
            <div class="modal d-block" style="background-color: rgba(0,0,0,0.5); z-index: 1050;">
                <div class="modal-dialog modal-lg modal-dialog-centered">
                    <div class="modal-content p-4">
                        <YachtToolsTabs OnClose="HideTools" />
                    </div>
                </div>
            </div>
        }
    </main>
    @if (!hideHeaderAndWhatsApp)
    {
        <footer class="menubar-area footer-fixed bottom-tabs">       
            <div class="toolbar-inner menubar-nav bottom-scroll-tab">
            <NavLink href="/home" class="tab nav-link" activeClass="active-tab" Match="NavLinkMatch.All">
                <img src="images/icon/news-white.svg" /> News
                </NavLink>
            <NavLink href="/dubai" class="tab nav-link" activeClass="active-tab">
                <img src="images/icon/event-white.svg" /> Event
                </NavLink>
            <NavLink href="/singapore" class="tab nav-link" activeClass="active-tab">
                <img src="images/icon/invest-white.svg" />Invest
            </NavLink>
            <NavLink href="/monaco" class="tab nav-link" activeClass="active-tab">
                <img src="images/icon/yatch-white.svg" /> Yatching
                </NavLink>
        </div>
    </footer>
    }
</div>
@code {
    private string transitionClass = "";
    private string _country;
    // private bool showDialog = false;
    private bool hideHeaderAndWhatsApp = false; //hideHeaderAndWhatsApp
    private bool hideHeader = false;
    private bool showToolsDialog = false;

    protected override async Task OnInitializedAsync()
    {

        // Detect current route
        UpdateVisibility();//hideHeaderAndWhatsApp

        NavManager.LocationChanged += (_, __) =>
        {
            transitionClass = "slide-in";
            UpdateVisibility();//hideHeaderAndWhatsApp
            StateHasChanged();
        };

        if (!SessionManager.IsAuthenticated)
        {
            var authService = new BiometricAuthService();
            bool success = await authService.AuthenticateAsync();

            if (success)
            {
                SessionManager.SetAuthenticated();
            }
            else
            {

            }
        }
        await FetchLocation();
    }

    //Dropdown
    private bool showDropdown = false;
    private DotNetObjectReference<MainLayout>? dotNetRef;

    private async void ToggleDropdown()
    {
        showDropdown = !showDropdown;

        if (showDropdown)
        {
            dotNetRef?.Dispose(); // dispose any existing reference
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("dropdownHelper.registerOutsideClick", "dropdownArea", dotNetRef);
        }
    }

    [JSInvokable]
    public void CloseDropdown()
    {
        showDropdown = false;
        StateHasChanged();
    }

    private void NavigateToDetails()
    {
        showDropdown = false;
        NavManager.NavigateTo("/details");
    }

    private void NavigateToCertificates()
    {
        showDropdown = false;
        NavManager.NavigateTo("/certificates");
    }

    private void Logout()
    {
        showDropdown = false;
        SessionManager.ClearAuthentication();
        NavManager.NavigateTo("/login", true);
    }

    public async ValueTask DisposeAsync()
    {
        dotNetRef?.Dispose();
    }
    //hideHeaderAndWhatsApp
    private void UpdateVisibility()
    {
        var currentUri = NavManager.Uri.ToLower();
        hideHeaderAndWhatsApp = currentUri.Contains("/login") || currentUri.Contains("/verify") || currentUri.Contains("/certificates") || currentUri.Contains("/certificatesGroup") || currentUri.Contains("/details");
        hideHeader = currentUri.Contains("/certificates") || currentUri.Contains("/certificatesGroup");

    }

    private async Task FetchLocation()
    {
        var _location = await LocationService.GetUserLocationAndCountryAsync();
        _country = _location.Country;
    }


    private void ShowTools()
    {
        showToolsDialog = true;
        StateHasChanged(); // optional
    }

    private void HideTools()
    {
        showToolsDialog = false;
        StateHasChanged(); // optional
    }

}
